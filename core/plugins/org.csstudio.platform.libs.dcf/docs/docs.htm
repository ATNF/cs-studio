<html>
<body>

<h1>Changes in the XMPP Management, July 2007</h1>

<br/>

<p>
Author: Klemen Strniša<br/>
Date: 27.7.2007
</p>

<br/>

<h2>File Transfer</h2>

<br/>

<h3>File Transfer Action Type</h3>
<p>
Another core action type has been added to accomodate the specific needs of file transfer. Meaning primarely the special
browser dialogs on both the sending and receiving side.<br/>
<b>important:</b>  This action type is not meant to be used for further actions as it is, due to its specialized nature,
very unflexible compared to the other core action types.
</p>

<h3>ActionFileTransfer class</h3>
<p>
This class manages the file transfer. It is run on the receiving side when an file transfer is requested. It receives all
the necessary information regarding the file transfer(filename, filesize, location of the file...). It queries the
preference store for information on how to treat the  incoming file transfer. For instance, whether to save the file
automatically to a default location or open a dialog, whether if it's a preference file should it be automatically
loaded... When all the necessary information are gathered, the actual file transfer is begun in a seperate thread.
</p>

<h3>FileTransferThread class</h3>
<p>
This is where the file is actually transfered. For each part that has to be transfered(the action determines the parts)
a request for that specific part is sent back to the initiator of the transfer. When the response is received, it is
checked if it really contains the file part data. If so it is written into the file and the next part is requested.
When the last part is recieved the appropriate command is sent and the file closed. This class also takes care of
informing the appropriate listener of the file transfer's state and progress.
</p>

<h3>ActionRequest Chunk class</h3>
<p>
This action is run every time a part of the file is requested. From the parameters of the request it gets the necessary
information about the file and it first checks if it is not a special command(transfer completed, failed or rejected).
If everything is well it reads the requested part of the file and sends it back as a response to the request.
</p>

<h3>Monitoring the file transfer</h3>
<p>
Classes that wish to monitor the progress of a file transfer have to implement IProgressListener interface. These classes
have to be added either to the ActionRequestChunk class to monitor the transfer on the sending side, or to the
ActionFileTransfer class to monitor it on the receiving side. An implementation of this interface is automatically added
on the sending side, that produces a dialog that shows the user the progress and state of the transfer.<br/>
Classes that wish to be alerted when the file transfer needs to acquire the saving destination or perform an automatic
action(such as automatically displaying the preview of the file in an appropriate view or opening it in an appropriate
editor) have to implement the IFileTransferListener interface. These classes have to register in the file transfer action
class.
</p>

<h3>Handling received files</h3>
<p>
Received files are handled by the class that implements the IFileTransferListener interface. When a file transfer is
successfully completed an auto-action method is run on the listener class. There is a view class(File View) that handles
all file previews and the central composite of that view depends on the filetype. The factories that provide these
composites are registered at the "org.csstudio.platform.libs.dcf.ui.fileViewers" extension point. If an appropriate
factory exists, the view is opened and the composite obtained.
</p>

<br/>

<h2>Handling Action Responses</h2>
<p>
Responses from actions(in the form of java objects, not files) are now, apart from being accessible in the
Action Request Explorer, also automatically loaded if the possibility exists. There is one view class(Response View) that
displays the responses and the central composite of that view depends on the type of the response. The factories that
provide these views are registered at the "org.csstudio.platform.libs.dcf.ui.responseViewers" extension point. If an
appropriate factory exists, the view is opened and the composite obtained.<br/>
Responses from the "Get Statistic Information" action are handled separately. This is due to the fact that the view this
responses have to be displayed in can't be modified to fit into the same scheme with the rest of the action responses as
described above. It extends the standard views extension point and includes additional functionality concerning statistic
information.
</p>

<br/>

<h2>Grouped Actions</h2>
<p>
Here, the action executing mechanism of DCF.ui has been changed. It now treats all selections as arrays of contact
elements. When querying for possible actions, it displays only the actions that are possible for all selected instances.
It is possible to select a non-manageable element(groups and usernames) in which case all the actions that are possible
for it's manageable children. When an action is selected, it is executed on the whole selection, or in case of
non-manageable elements on their manageable children. The selection may contain manageable and non-manageable elements.
</p>

<br/>

<h2>Directory viewer expanding problem</h2>
<p>
The directory viewer has been changed in the following way. By default it does not expand when a new element arrives.
If the parent group of the arrived element is already expanded it will expand all the extra nodes it must to show the
arrived element.<br/>
This is achieved with the directory viewer always remembering witch elements are expanded and what is it's manageable
input. When the notification of a directory change arrives through the connection manager the directory viewer compares
it's input against the new input and notes if there is a new element present. It then expands all the nodes that should
be expanded and checks if the new element's parent group is among them. If that is so, it additionally expands all the
nodes necessary so that the new element becomes visible.
</p>



</body>
</html>