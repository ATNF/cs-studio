# These commands create a new MySQL database for archiving.
#
# THIS WILL DELETE ANY DATA THAT MIGHT BE IN THERE!
#
# The Oracle schema should be similar, except:
# - exact data types can vary (length of strings etc.
# - Oracle TIMESTAMP already includes the nanosecond detail, so
#   no separate nanoseconds column is required
# - Partitioning code
#
# Test setup:
# MySQL 5.0 on a Linux Laptop
# (1.6 GHz, disk access hampered by pointsec)
# and INSERTs performed from a Java program
# on a 1.3 GHz OS X PowerBook G4
#
# Result of 10 min test run with MyISAM (no referential integrity check)
# About 2500 inserts per second,
# using ~33 bytes per value
# (overall database size / pure sample count).
# accl2 (about 20% CPU used by other people) -> ics-srv-softioc4: 1900 / sec
# fe-ics-opi1 (otherwise ~idle CPU) -> ics-srv-softioc4: 3400 / sec
# local, all on ics-srv-softioc4: 11000 / sec
#
# Result of 10 min test run with InnoDB (check sample.channel_id)
# About 750 inserts per second.
# Byte/sample unclear because not all data in a mysql/data subdir?
# accl2 -> ics-srv-softioc4: 1200 / sec
# local, all on ics-srv-softioc4: 3500 / sec

# ----------------------

DROP DATABASE IF EXISTS archive;

CREATE DATABASE archive;

USE archive;

# ----------------------
# Sample engine
DROP TABLE IF EXISTS smpl_eng;
CREATE TABLE IF NOT EXISTS smpl_eng
(
   eng_id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
   name VARCHAR(100) NOT NULL,
   descr VARCHAR(100) NOT NULL,
   url VARCHAR(100) NOT NULL
);
INSERT INTO smpl_eng VALUES (1, 'Demo', 'Demo Engine', 'http://localhost:4812');
SELECT * FROM smpl_eng;

# ----------------------
# Retention
# Not used at this time
DROP TABLE IF EXISTS retent;
CREATE TABLE IF NOT EXISTS retent
(
   retent_id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
   descr VARCHAR(100) NOT NULL
);
INSERT INTO retent VALUES (9999, 'Forever');
SELECT * FROM retent;


# ----------------------
# Channel Group
DROP TABLE IF EXISTS chan_grp;
CREATE TABLE IF NOT EXISTS chan_grp
(
   grp_id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
   name VARCHAR(100) NOT NULL,
   eng_id INT UNSIGNED NOT NULL,
   enabling_chan_id INT UNSIGNED NULL,
   retent_id INT UNSIGNED NOT NULL
);
INSERT INTO chan_grp VALUES (1, 'Demo', 1, NULL, 9999);
SELECT * FROM chan_grp;

# ----------------------
# Sample modes
DROP TABLE IF EXISTS smpl_mode;
CREATE TABLE IF NOT EXISTS smpl_mode
(
   smpl_mode_id INT UNSIGNED NOT NULL PRIMARY KEY,
   name VARCHAR(100) NOT NULL,
   descr VARCHAR(100) NOT NULL
);
INSERT INTO smpl_mode VALUES (1, 'Monitor', 'Store every received update');
INSERT INTO smpl_mode VALUES (2, 'Scan', 'Periodic scan');
SELECT * FROM smpl_mode;

# ----------------------
# Channel: ID and name
DROP TABLE IF EXISTS channel;
CREATE TABLE IF NOT EXISTS channel
(
   channel_id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
   name VARCHAR(100) NOT NULL,
   grp_id INT UNSIGNED NULL,
   smpl_mode_id INT UNSIGNED NULL,
   smpl_per DOUBLE NULL
);
INSERT INTO channel(channel_id, name) VALUES (1, 'fred'), (2, 'freddy'), (3, 'jane');
SELECT * FROM channel;

# ----------------------
# Severity mapping of severity ID to string
DROP TABLE IF EXISTS severity;
CREATE TABLE IF NOT EXISTS severity
(
   severity_id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
   name VARCHAR(100) NOT NULL
);
INSERT INTO severity VALUES (1, 'OK'), (2, 'MINOR'), (3, 'MAJOR'), (4, 'INVALID');
SELECT * FROM severity;

# ----------------------
# Status mapping of status ID to string
DROP TABLE IF EXISTS status;
CREATE TABLE IF NOT EXISTS status
(
   status_id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
   name VARCHAR(100) NOT NULL UNIQUE
);
INSERT INTO status (name) VALUES ('OK'), ('disconnected');
SELECT * FROM status;

# ----------------------
# Samples of a channel
# Either the numeric, floating point or string value should be set,
# not all of them.
# For (double) arrays, the float_val contains the first array element,
# and the array_val table has the following ones
DROP TABLE IF EXISTS sample;
CREATE TABLE IF NOT EXISTS sample
(
   channel_id INT UNSIGNED NOT NULL,
   smpl_time TIMESTAMP NOT NULL,
   nanosecs INT UNSIGNED NOT NULL,
   severity_id INT UNSIGNED NOT NULL,
   status_id INT UNSIGNED NOT NULL,
   num_val INT NULL,
   float_val REAL NULL,
   str_val VARCHAR(120) NULL,
   FOREIGN KEY (channel_id) REFERENCES channel (channel_id) ON DELETE CASCADE,
   FOREIGN KEY (severity_id) REFERENCES severity (severity_id) ON DELETE CASCADE,
   FOREIGN KEY (status_id) REFERENCES status (status_id) ON DELETE CASCADE
);

# These inserts are in reverse time order to check retrieval
INSERT INTO sample (channel_id, smpl_time, nanosecs, severity_id, status_id, float_val)
   VALUES (1, '2004-01-10 13:01:17', 1, 3, 2, 3.16),
          (1, '2004-01-10 13:01:11', 2, 1, 1, 3.16),
          (1, '2004-01-10 13:01:10', 3, 1, 2, 3.15),
          (1, '2004-01-10 13:01:10', 4, 1, 3, 3.14);

# ----------------------
# See sample table: Array elements 1, 2, 3, ... beyond the element 0
# that's in the sample table
DROP TABLE IF EXISTS array_val;
CREATE TABLE IF NOT EXISTS array_val
(
   channel_id INT UNSIGNED NOT NULL,
   smpl_time TIMESTAMP NOT NULL,
   nanosecs INT UNSIGNED NOT NULL,
   seq_nbr INT UNSIGNED NOT NULL,
   float_val REAL NULL,
   FOREIGN KEY (channel_id) REFERENCES channel (channel_id) ON DELETE CASCADE
);

# ----------------------
# Channel Meta data: Units etc. for numeric channels
DROP TABLE IF EXISTS num_metadata;
CREATE TABLE IF NOT EXISTS num_metadata
(
   channel_id INT UNSIGNED NOT NULL PRIMARY KEY,
   low_disp_rng REAL NULL,
   high_disp_rng REAL NULL,
   low_warn_lmt REAL NULL,
   high_warn_lmt REAL NULL,
   low_alarm_lmt REAL NULL,
   high_alarm_lmt REAL NULL,
   prec INT NULL,
   unit VARCHAR(100) NOT NULL
);
INSERT INTO num_metadata VALUES (1, 0, 10, 2, 8, 1, 9, 2, 'mA');
SELECT * FROM num_metadata;

# ----------------------
# Enumerated channels have a sample.num_val that can also be interpreted
# as an enumeration string via this table
DROP TABLE IF EXISTS enum_metadata;
CREATE TABLE IF NOT EXISTS enum_metadata
(
   channel_id INT UNSIGNED NOT NULL,
   enum_nbr INT NULL,
   enum_val VARCHAR(120) NULL,
   FOREIGN KEY (channel_id) REFERENCES channel (channel_id) ON DELETE CASCADE
);

# ----------------------
# ----------------------
# ----------------------
# Dump all values for all channels
SELECT channel.name, smpl_time, severity.name, status.name, float_val
   FROM channel, severity, status, sample 
   WHERE channel.channel_id = sample.channel_id AND
         severity.severity_id = sample.severity_id AND
         status.status_id = sample.status_id
   ORDER BY smpl_time
   LIMIT 50;

# Same with INNER JOIN
SELECT channel.name AS channel,
       smpl_time,
       severity.name AS severity,
       status.name AS status,
       float_val
   FROM sample INNER JOIN channel INNER JOIN severity INNER JOIN status
   ON channel.channel_id = sample.channel_id AND
      severity.severity_id = sample.severity_id AND
      status.status_id = sample.status_id
   ORDER BY smpl_time
   LIMIT 50;
   

# --- test stuff   
DROP TABLE IF EXISTS test;
CREATE TABLE IF NOT EXISTS test
(
   time INT UNSIGNED NOT NULL,
   nano INT UNSIGNED NOT NULL
);
 
INSERT INTO test(time, nano) VALUES (1, 2), (1, 1), (3, 4), (4, 3);

SELECT * FROM test ORDER BY time, nano;
SELECT * FROM test ORDER BY time DESC, nano DESC;
   
