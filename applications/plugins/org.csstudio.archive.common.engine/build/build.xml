<project name="css.hudson.build" default="build">
	<property file="build.properties" />
	<property file="tools.properties" />
	

	<target name="build" depends="syncPlugins, buildWindows, buildSolaris"/>

	<target name="buildWindows" depends="cleanup, pdeBuildWin, updateConfigWin, jenkinsUpdateWin"/>
	<target name="buildSolaris" depends="cleanup, pdeBuildSolaris, updateConfigSolaris, jenkinsUpdateSolaris"/>

	<!--
		Debug output
	-->
	
	<echo message="'workspaceLocation: ${workspaceLocation}"/>
	<echo message="'e360TP: targetPlatformLocation"/>
	<echo message="'buildDirectory: ${buildDirectory}"/>
	<echo message="'jenkinsbase: ${jenkinsbase}"/>
	<echo message="'base: ${base}"/>
	<echo message="'tstamp: ${tstamp}"/>
	<echo message="'jenkinsjob: ${jenkinsjob}"/>
	<echo message="'BaseLocation: targetPlatformLocation"/>
	<echo message="'buckminsterLocation: ${buckminsterLocation}"/>
	<echo message="'buckminsterVersion: ${buckminsterEquinoxLauncherPluginVersion}"/>
	<echo message="'buckminsterCquery: ${buckminsterCquery}"/>
    <echo message="targetPlatformLocation/plugins/org.eclipse.equinox.launcher_1.1.0.v20100507.jar" />
	
	
	<!--
	 Synchronizes the plugin contents retrieved by the upstream jenkins jobs with the current build 
	 directory (avoiding unnecessary copying and deleting as much as possible).
	-->
	<target name="syncPlugins">
		<!--  
		 overwrites all files in ${workspaceLocation}/build with newer files from filesets, 
		 deletes files from ${workspaceLocation}/build that are not present in filesets. 
		-->
		<sync todir="${workspaceLocation}/build">
		  <fileset dir="${csStudioLocation}/core"/>
		  <fileset dir="${csStudioLocation}/applications"/>
          <fileset dir="${desyConfigLocation}/DESY/css/sensitivedata/${projectName}/plugin_customization.ini"/>
          <fileset dir="${targetPlatformLocation}"/>
          <fileset dir="${targetPlatformLocation_2}"/>
		</sync>
	</target>
	
	
	<!--
    	Headless Eclipse Build.
	-->
	<target name="cleanup">
		<delete file="${workspaceLocation}/build/*.xml"/>	
		<delete file="${workspaceLocation}/build/*.properties"/>	
		<delete file="${workspaceLocation}/build/*.sh"/>	
		<delete file="${workspaceLocation}/build/secure_storage"/>	
		<delete dir="${workspaceLocation}/build/I.CSSHead_"/>	
		<delete dir="${workspaceLocation}/build/initmp"/>	
	</target>

	<!--
	    Headless Eclipse Build for Linux
	-->
	<target name="pdeBuildWin">
		<java classname="org.eclipse.equinox.launcher.Main" fork="true" failonerror="true">			
			<arg value="-application" />
			<arg value="org.eclipse.ant.core.antRunner" />
			<arg value="-buildfile" />
			<arg value="${base}/productBuild.xml" />
			<arg value="-DbaseLocation=targetPlatformLocation" />
			<arg value="-Dconfigs=win32, win32, x86" />
			<classpath>
				<pathelement location="targetPlatformLocation/plugins/org.eclipse.equinox.launcher_1.1.0.v20100507.jar" />
			</classpath>
		</java>
	</target>

	<!--
	    Headless Eclipse Build for Solaris
	-->
	<target name="pdeBuildSolaris">
		<java classname="org.eclipse.equinox.launcher.Main" fork="true" failonerror="true">			
			<arg value="-application" />
			<arg value="org.eclipse.ant.core.antRunner" />
			<arg value="-buildfile" />
			<arg value="${base}/productBuild.xml" />
			<arg value="-DbaseLocation=targetPlatformLocation" />
			<arg value="-Dconfigs=solaris, gtk, sparc" />
			<classpath>
				<pathelement location="targetPlatformLocation/plugins/org.eclipse.equinox.launcher_1.1.0.v20100507.jar" />
			</classpath>
		</java>
	</target>

	<!--
		Copy plugincustomization and to win product
	-->
	<target name="updateConfigWin">
		<mkdir dir="${workspaceLocation}build/initmp/${archivePrefix}" />
		<copy todir="${workspaceLocation}build/initmp/${archivePrefix}">
			<fileset file="${workspaceLocation}/plugin_customization.ini"/>
		</copy>
		<zip destfile="${workspaceLocation}/build/${buildLabel}/${buildId}-win32.win32.x86.zip" basedir="${workspaceLocation}/build/initmp" update="true" />
	</target>

	<!--
		Copy plugincustomization and to solaris product
	-->
	<target name="updateConfigSolaris">
		<mkdir dir="${workspaceLocation}/build/initmp/${archivePrefix}" />
		<copy todir="${workspaceLocation}/build/initmp/${archivePrefix}">
			<fileset file="${workspaceLocation}/plugin_customization.ini"/>
		</copy>
		<zip destfile="${workspaceLocation}/build/${buildLabel}/${buildId}-solaris.gtk.sparc.zip" basedir="${workspaceLocation}/build/initmp" update="true" />
	</target>

	<!--
		Copy win product to artifact folder from hudson
	-->
	<target name="jenkinsUpdateWin">
		<copy file="${workspaceLocation}/build/${buildLabel}/${buildId}-win32.win32.x86.zip" todir="${jenkinsbase}/home/jobs/${jenkinsjob}/workspace/artefacts"/>
	</target>

	<!--
		Copy solaris product to artifact folder from hudson
	-->
	<target name="jenkinsUpdateSolaris">
		<copy file="${workspaceLocation}/build/${buildLabel}/${buildId}-solaris.gtk.sparc.zip" todir="${jenkinsbase}/home/jobs/${jenkinsjob}/workspace/artefacts"/>
	</target>
</project>