<project name="css.hudson.build" default="build">
    <property file="desy.build.properties" />
    <property file="desy.eclipse.properties" />
    <property file="build.properties" /> <!-- used by the pde build internally -->
    
    <target name="build" depends="synchronizeBuildSources, buildPackageWin32, buildPackageSolaris"/>

    <target name="buildPackageWin32" depends="cleanup, pdeBuildWin, updateConfigWin, updateJenkinsArtifactsWin32"/>
    <target name="buildPackageSolaris" depends="cleanup, pdeBuildSolaris, updateConfigSolaris, updateJenkinsArtifactsSolaris"/>

    <!--
        Debug output
    -->
    <tstamp>
        <format timezone="GMT" property="timestamp" pattern="yyyy-MM-dd_hh:mm:ss"/>
    </tstamp>
    <echo message="Jenkins base: ${jenkinsbase}"/>
    <echo message="CS Studio location:  ${csStudioLocation}"/>
    <echo message="DESY config location:  ${desyConfigLocation}"/>
    <echo message="Eclipse instance: ${eclipseInstance}"/>
    <echo message="Launcher: ${equinoxLauncher}" />
    <echo message="Eclipse target platform: ${targetPlatformLocation}"/>

    <echo message="Base dir: ${basedir}"/>
    <echo message="Job name: ${jenkinsjob}"/>
    <echo message="Workspace location: ${workspaceLocation}"/>
    <echo message="Build directory: ${buildDirectory}"/>
    <echo message="Product file: ${product}"/>
    <echo message="Timestamp: ${timestamp}"/>    
    
    <!--
     Synchronizes the plugin contents retrieved by the upstream jenkins jobs with the current build 
     directory (avoiding unnecessary copying and deleting as much as possible).
    -->
    <target name="synchronizeBuildSources">
        <!--  
         overwrites all files in ${workspaceLocation}/build with newer files from filesets, 
         deletes files from ${workspaceLocation}/build that are not present in filesets. 
        -->
        <sync todir="${buildDirectory}">
            <fileset dir="${csStudioLocation}/core"/>
            <fileset dir="${csStudioLocation}/applications"/>
            <fileset dir="${csStudioLocation}/products/DESY">
                <exclude name="plugins/${projectDir}/build/build.xml"/>
            </fileset>
            <fileset dir="${targetPlatformLocation}">
              <include name="plugins/**/*"/>
              <include name="features/**/*"/>
            </fileset>
        </sync>
        
        <!-- 
         copy the pde build files into the build directory 
        -->
        <copy todir="${buildDirectory}">
          <fileset dir="${basedir}" casesensitive="yes">
            <include name="build.properties"/>
            <!--include name="productBuild.xml"/-->
          </fileset>          
          <fileset dir="${desyConfigLocation}/DESY/css/sensitivedata/${projectDir}" casesensitive="yes">
            <include name="plugin_customization.ini"/>
            <include name="plugin_customization_solaris.ini"/>
          </fileset>
        </copy>
    </target>
    
    
    <!--
        Headless Eclipse Build.
    -->
    <target name="cleanup"> 
        <delete dir="${iniTmpDir}"/>    
    </target>

    <!--
        Headless Eclipse Build for Windows
    -->
    <target name="pdeBuildWin">
        <java classname="org.eclipse.equinox.launcher.Main" 
              dir="${buildDirectory}"
              fork="true" 
              failonerror="true"
              logerror="true">           
            <arg value="-application" />
            <arg value="org.eclipse.ant.core.antRunner" />
            <arg value="-buildfile" />
            <arg value="${eclipsePdeBuildPlugin}/scripts/productBuild/productBuild.xml" />
            <arg value="-DbaseLocation=${targetPlatformLocation}" />
            <arg value="-DbuildDirectory=${buildDirectory}"/>
            <arg value="-Dconfigs=win32, win32, x86" />
            <arg value="-Dproduct=${projectDir}/${productName}.product" />
            <classpath>
                <pathelement location="${equinoxLauncher}" />
            </classpath>
        </java>
    </target>   

    <!--
        Headless Eclipse Build for Solaris
    -->
    <target name="pdeBuildSolaris">
        <java classname="org.eclipse.equinox.launcher.Main" 
              dir="${buildDirectory}"
              fork="true" 
              failonerror="true"
              logerror="true">           
            <arg value="-application" />
            <arg value="org.eclipse.ant.core.antRunner" />
            <arg value="-buildfile" />
            <arg value="${eclipsePdeBuildPlugin}/scripts/productBuild/productBuild.xml" />
            <arg value="-DbaseLocation=${targetPlatformLocation}" />
            <arg value="-DbuildDirectory=${buildDirectory}"/>
            <arg value="-Dconfigs=solaris, gtk, sparc" />
            <classpath>
                <pathelement location="${equinoxLauncher}" />
            </classpath>
        </java>
    </target>

    <!--
        Copy plugin customization and zip win product
    -->
    <target name="updateConfigWin" depends="cleanup">
        <mkdir dir="${iniTmpDir}/${archivePrefix}" />
        <copy file="${buildDirectory}/plugin_customization.ini" 
              tofile="${iniTmpDir}/${archivePrefix}/plugin_customization.ini"/>
        <zip destfile="${buildDirectory}/${buildLabel}/${productName}-win32.win32.x86.zip" 
             basedir="${iniTmpDir}" update="true" />
    </target>

    <!--
        Copy solaris plugin customization and zip solaris product
    -->
    <target name="updateConfigSolaris" depends="cleanup">
        <mkdir dir="${iniTmpDir}/${archivePrefix}" />
        <copy file="${buildDirectory}/plugin_customization_solaris.ini" 
              tofile="${iniTmpDir}/${archivePrefix}/plugin_customization.ini"/>
        <zip destfile="${buildDirectory}/${buildLabel}/${buildId}-solaris.gtk.sparc.zip" 
             basedir="${iniTmpDir}" update="true" />
    </target>

    <!--
        Copy win product to artifact folder from hudson
    -->
    <target name="updateJenkinsArtifactsWin32">
        <copy file="${buildDirectory}/${buildLabel}/${productName}-win32.win32.x86.zip" 
              todir="${workspaceLocation}/artifacts"/>
    </target>

    <!--
        Copy solaris product to artifact folder from hudson
    -->
    <target name="updateJenkinsArtifactsSolaris">
        <copy file="${buildDirectory}/${buildLabel}/${buildId}-solaris.gtk.sparc.zip" 
              todir="${workspaceLocation}/artifacts"/>
    </target>
</project>
