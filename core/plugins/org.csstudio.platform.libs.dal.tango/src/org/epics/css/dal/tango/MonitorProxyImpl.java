package org.epics.css.dal.tango;

import java.util.EnumSet;

import org.epics.css.dal.DataExchangeException;
import org.epics.css.dal.DynamicValueCondition;
import org.epics.css.dal.DynamicValueState;
import org.epics.css.dal.RemoteException;
import org.epics.css.dal.Request;
import org.epics.css.dal.Response;
import org.epics.css.dal.ResponseListener;
import org.epics.css.dal.Timestamp;
import org.epics.css.dal.impl.RequestImpl;
import org.epics.css.dal.impl.ResponseImpl;
import org.epics.css.dal.proxy.MonitorProxy;

import fr.esrf.Tango.DevFailed;
import fr.esrf.TangoApi.DeviceAttribute;

/**
 * 
 * <code>MonitorProxyImpl</code> is the monitor proxy implementation
 * for the tango plug. It is subscribed to a remote property and
 * provides updates from that property to the registered listener. 
 *
 * @author <a href="mailto:jaka.bobnar@cosylab.com">Jaka Bobnar</a>
 *
 * @param <T> the type of data that is read from the control system
 */
public class MonitorProxyImpl<T> extends RequestImpl<T> implements MonitorProxy, CallbackListener {
	
	static final int DEFAULT_TIMER_TRIGGER = 1000;
		
	private PropertyProxyImpl<T> source;

	private long timerTrigger = DEFAULT_TIMER_TRIGGER;
	private boolean heartbeat = true;

	private boolean destroyed = false;
	
	private TangoMonitorRequestCallback callback;
	
	/**
	 * Constructs a new Monitor Proxy. This monitor was generated by the 
	 * given source and will forward responses to the given response listener.
	 * 
	 * @param source the source of the monitor
	 * @param l the listener that will receive all updates from this monitor
	 */
	public MonitorProxyImpl(PropertyProxyImpl<T> source, ResponseListener<T> l) {
		super(source,l);
		this.source = source;
	}

	/**
	 * Initialize this monitor: establish a connection and subscribe to
	 * events as defined by heartbeat and time trigger properties.
	 * 
	 * @throws RemoteException if initialization of the connection failed
	 */
	void initialize() throws RemoteException {		
		getCallback().initialize(timerTrigger, heartbeat);
	}
	
	/*
	 * (non-Javadoc)
	 * @see org.epics.css.dal.proxy.MonitorProxy#getRequest()
	 */
	public Request<?> getRequest() {
		return this;
	}

	/*
	 * (non-Javadoc)
	 * @see org.epics.css.dal.proxy.MonitorProxy#refresh()
	 */
	public void refresh() {
		//
	}

	/*
	 * (non-Javadoc)
	 * @see org.epics.css.dal.SimpleMonitor#destroy()
	 */
	public void destroy() {
		TangoPropertyPlug.getInstance().releaseCallbackFromCache(this);
	}

	/*
	 * (non-Javadoc)
	 * @see org.epics.css.dal.SimpleMonitor#getDefaultTimerTrigger()
	 */
	public long getDefaultTimerTrigger() throws DataExchangeException {
		return DEFAULT_TIMER_TRIGGER;
	}

	/*
	 * (non-Javadoc)
	 * @see org.epics.css.dal.SimpleMonitor#getTimerTrigger()
	 */
	public long getTimerTrigger() throws DataExchangeException {
		return timerTrigger;
	}

	/*
	 * (non-Javadoc)
	 * @see org.epics.css.dal.SimpleMonitor#isDefault()
	 */
	public boolean isDefault() {
		return true;
	}

	/*
	 * (non-Javadoc)
	 * @see org.epics.css.dal.SimpleMonitor#isDestroyed()
	 */
	public boolean isDestroyed() {
		return destroyed;
	}

	/*
	 * (non-Javadoc)
	 * @see org.epics.css.dal.SimpleMonitor#isHeartbeat()
	 */
	public boolean isHeartbeat() {
		return heartbeat;
	}

	/*
	 * (non-Javadoc)
	 * @see org.epics.css.dal.SimpleMonitor#setHeartbeat(boolean)
	 */
	public void setHeartbeat(boolean heartbeat) throws DataExchangeException, UnsupportedOperationException {
		this.heartbeat = heartbeat;
		try {
			initialize();
		} catch (RemoteException e) {
			throw new DataExchangeException(this,"Could not set the heartbeat to '" + heartbeat +"' for property '" + source.getPropertyName().getPropertyName() +"' on device '" + source.getDeviceProxy().get_name() +"'. Monitor could not be initialized.",e);
		}
	}

	/*
	 * (non-Javadoc)
	 * @see org.epics.css.dal.SimpleMonitor#setTimerTrigger(long)
	 */
	public void setTimerTrigger(long trigger) throws DataExchangeException, UnsupportedOperationException {
		if (this.timerTrigger == trigger) return;
		this.timerTrigger = trigger;
		try {
			initialize();
		} catch (RemoteException e) {
			throw new DataExchangeException(this,"Could not change the heartbeat rate for property '" + source.getPropertyName().getPropertyName() +"' on device '" + source.getDeviceProxy().get_name() +"'.",e);
		}

	}

	/**
	 * Returns the callback which is used to receive notifications from the control
	 * system.
	 * 
	 * @return the tango callback
	 */
	TangoMonitorRequestCallback getCallback() {
		if (callback == null) {
			callback = TangoPropertyPlug.getInstance().getCallbackFromCache(this);
		}
		return callback;
	}	
	
	/**
	 * Returns the property source of this monitor.
	 * 
	 * @return the property proxy 
	 */
	PropertyProxyImpl<T> getSourceProxy() {
		return source;
	}

	/*
	 * (non-Javadoc)
	 * @see org.epics.css.dal.tango.CallbackListener#responseReceived(org.epics.css.dal.tango.CallbackEvent)
	 */
	public void responseReceived(CallbackEvent e) {
		if (e.isError()) {
    		DynamicValueCondition condition = new DynamicValueCondition(EnumSet.of(DynamicValueState.ERROR),new Timestamp(System.currentTimeMillis(),0),"Error initializing proxy");
    		source.setCondition(condition);
    		Response<T> r = new ResponseImpl<T>(source,this,null,
    				source.getUniqueName(),false,new DataExchangeException(this,e.getErrors()[0].desc),source.getCondition(),
    				new Timestamp(System.currentTimeMillis(),0),false);
    		addResponse(r);
    	} else if (e.getAttributes() == null) {
    		//write event
    		DynamicValueCondition condition = new DynamicValueCondition(EnumSet.of(DynamicValueState.NORMAL),new Timestamp(System.currentTimeMillis(),0),"Error initializing proxy");
			source.setCondition(condition);
			Response<T> r = new ResponseImpl<T>(source,this,null,
					source.getUniqueName(),true,null,source.getCondition(),
					new Timestamp(System.currentTimeMillis(),0),false);
			addResponse(r);
    	} else {
    		try {
    			DeviceAttribute[] attr = e.getAttributes();
        		for (DeviceAttribute a : attr) {
        			if (a.getName().equals(source.getPropertyName().getPropertyName())) {
        				T value = source.extractValue(a);
        				DynamicValueCondition condition = new DynamicValueCondition(EnumSet.of(DynamicValueState.NORMAL),new Timestamp(System.currentTimeMillis(),0),"Error initializing proxy");
        				source.setCondition(condition);
        				Response<T> r = new ResponseImpl<T>(source,this,value,
        						source.getUniqueName(),true,null,source.getCondition(),
        						new Timestamp(System.currentTimeMillis(),0),false);
        				addResponse(r);
        				return;
        			}
        		}
    		} catch (DevFailed ex) {
    			DynamicValueCondition condition = new DynamicValueCondition(EnumSet.of(DynamicValueState.ERROR),new Timestamp(System.currentTimeMillis(),0),"Error initializing proxy");
    			source.setCondition(condition);
    			Response<T> r = new ResponseImpl<T>(source,this,null,
    					source.getUniqueName(),false,ex,source.getCondition(),
    					new Timestamp(System.currentTimeMillis(),0),false);
    			addResponse(r);
    		}
    	}
		
	}
	
	/*
	 * (non-Javadoc)
	 * @see org.epics.css.dal.tango.CallbackListener#propertiesChanged(org.epics.css.dal.tango.CallbackEvent)
	 */
	public void propertiesChanged(CallbackEvent e) {
		this.heartbeat = e.isHeartbeat();
		this.timerTrigger = e.getTimerTrigger();
	}
}
