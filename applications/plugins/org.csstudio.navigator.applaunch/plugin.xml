<?xml version="1.0" encoding="UTF-8"?>
<?eclipse version="3.4"?>
<plugin>
   <!-- Use XML files that start with <application>... as
        launch config files.
    -->
   <extension point="org.eclipse.core.contenttype.contentTypes">
      <content-type
            base-type="org.eclipse.core.runtime.xml"
            file-extensions="app,xml"
            id="application"
            name="Application"
            priority="high">
         <describer class="org.eclipse.core.runtime.content.XMLRootElementContentDescriber2">
            <parameter name="element" value="application"/>
         </describer>
      </content-type>
   </extension>

   <!-- Ideally, I would like to be able to use any file extension,
        including empty, so that a launch config file called "Emacs"
        could start emacs.
        But the editor and its icon are only associated by file extension,
        so at least the org.eclipse.ui.editors extension must list
        file extensions.
    -->
   <extension point="org.eclipse.ui.editors">
      <editor id="org.csstudio.navigator.applaunch"
            icon="icons/run.gif"
            extensions="app,xml"
            launcher="org.csstudio.navigator.applaunch.Launcher"
            name="%LaunchApplication">
         <contentTypeBinding contentTypeId="org.csstudio.navigator.applaunch.application"/>
      </editor>
   </extension>
   
   <!-- Decorate files with custom icons.
        When a launcher config file is initially empty,
        it lacks the <application> tag to be identified via type id.
        When lated edited, a navigator refresh is required for the
        icon to update.
     -->
   <extension point="org.eclipse.ui.decorators">
      <decorator id="org.csstudio.navigator.applaunch.IconDecorator"
            adaptable="true"
            class="org.csstudio.navigator.applaunch.IconDecorator"
            label="Application Icon"
            lightweight="false"
            state="true">
         <enablement>
            <and>
               <objectClass
                    name="org.eclipse.core.resources.IFile">
               </objectClass>
               <objectState
                     name="contentTypeId"
                     value="org.csstudio.navigator.applaunch.application">
               </objectState>
            </and>
         </enablement>
      </decorator>
   </extension>
</plugin>
