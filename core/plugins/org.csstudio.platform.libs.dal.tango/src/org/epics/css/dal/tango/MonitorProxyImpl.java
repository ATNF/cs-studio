package org.epics.css.dal.tango;

import org.epics.css.dal.DataExchangeException;
import org.epics.css.dal.RemoteException;
import org.epics.css.dal.Request;
import org.epics.css.dal.Response;
import org.epics.css.dal.ResponseListener;
import org.epics.css.dal.Timestamp;
import org.epics.css.dal.context.ConnectionException;
import org.epics.css.dal.impl.ResponseImpl;
import org.epics.css.dal.proxy.MonitorProxy;

import fr.esrf.Tango.DevFailed;
import fr.esrf.TangoDs.TangoConst;

/**
 * 
 * <code>MonitorProxyImpl</code> is the monitor proxy implementation
 * for the tango plug. It is subscribed to a remote property and
 * provides updates from that property to the registered listener. 
 *
 * @author <a href="mailto:jaka.bobnar@cosylab.com">Jaka Bobnar</a>
 *
 * @param <T> the type of data that is read from the control system
 */
public class MonitorProxyImpl<T> extends TangoRequestImpl<T> implements MonitorProxy {

	private static final int DEFAULT_TIMER_TRIGGER = 1000;
	
	private PropertyProxyImpl<T> source;
	private int eventID = -1;
	private long timerTrigger = DEFAULT_TIMER_TRIGGER;
	private boolean heartbeat = true;
	private boolean destroyed = false;
	
	/**
	 * Constructs a new Monitor Proxy. This monitor was generated by the 
	 * given source and will forward responses to the given response listener.
	 * 
	 * @param source the source of the monitor
	 * @param l the listener that will receive all updates from this monitor
	 */
	public MonitorProxyImpl(PropertyProxyImpl<T> source, ResponseListener<T> l) {
		super(source,l);
		this.source = source;
	}

	/**
	 * Initialize this monitor: establish a connection and subscribe to
	 * events as defined by heartbeat and time trigger proeprties.
	 * 
	 * @throws RemoteException if initialization of the connection failed
	 */
	synchronized void initialize() throws RemoteException {		
		try {
			if (eventID >= 0) {
				source.getDeviceProxy().unsubscribe_event(eventID);
			}
			int event = 0;
			source.getDeviceProxy().poll_attribute(source.getPropertyName().getPropertyName(),(int)timerTrigger);
			if (heartbeat) {
				event = TangoConst.PERIODIC_EVENT;
			} else {
				event = TangoConst.CHANGE_EVENT;
			}
			eventID = source.getDeviceProxy().subscribe_event(source.getPropertyName().getPropertyName(),event,getCallback(),new String[0],false);
		} catch (DevFailed e) {
			throw new RemoteException(this, "Cannot create monitor for '" + source.getPropertyName().getPropertyName() +"' on device '" + source.getDeviceProxy().get_name() +"'.",e);
		}
	}
	
	/*
	 * (non-Javadoc)
	 * @see org.epics.css.dal.proxy.MonitorProxy#getRequest()
	 */
	public Request<?> getRequest() {
		return this;
	}

	/*
	 * (non-Javadoc)
	 * @see org.epics.css.dal.proxy.MonitorProxy#refresh()
	 */
	public void refresh() {
		// 
		
	}

	/*
	 * (non-Javadoc)
	 * @see org.epics.css.dal.SimpleMonitor#destroy()
	 */
	public void destroy() {
		try {
			if (eventID >= 0) {
				source.getDeviceProxy().unsubscribe_event(eventID);
			}
			destroyed = true;
		} catch (DevFailed e) {
			Response<T> r = new ResponseImpl<T>(source,this,null,
    				source.getUniqueName(),true,new ConnectionException(this,"Error destroying monitor"),
    				source.getCondition(),new Timestamp(System.currentTimeMillis(),0),true);
    		addResponse(r);
		}
	}

	/*
	 * (non-Javadoc)
	 * @see org.epics.css.dal.SimpleMonitor#getDefaultTimerTrigger()
	 */
	public long getDefaultTimerTrigger() throws DataExchangeException {
		return DEFAULT_TIMER_TRIGGER;
	}

	/*
	 * (non-Javadoc)
	 * @see org.epics.css.dal.SimpleMonitor#getTimerTrigger()
	 */
	public long getTimerTrigger() throws DataExchangeException {
		return timerTrigger;
	}

	/*
	 * (non-Javadoc)
	 * @see org.epics.css.dal.SimpleMonitor#isDefault()
	 */
	public boolean isDefault() {
		return true;
	}

	/*
	 * (non-Javadoc)
	 * @see org.epics.css.dal.SimpleMonitor#isDestroyed()
	 */
	public boolean isDestroyed() {
		return destroyed;
	}

	/*
	 * (non-Javadoc)
	 * @see org.epics.css.dal.SimpleMonitor#isHeartbeat()
	 */
	public boolean isHeartbeat() {
		return heartbeat;
	}

	/*
	 * (non-Javadoc)
	 * @see org.epics.css.dal.SimpleMonitor#setHeartbeat(boolean)
	 */
	public void setHeartbeat(boolean heartbeat) throws DataExchangeException, UnsupportedOperationException {
		this.heartbeat = heartbeat;
		try {
			initialize();
		} catch (RemoteException e) {
			throw new DataExchangeException(this,"Could not set the heartbeat to '" + heartbeat +"' for property '" + source.getPropertyName().getPropertyName() +"' on device '" + source.getDeviceProxy().get_name() +"'. Monitor could not be initialized.",e);
		}
	}

	/*
	 * (non-Javadoc)
	 * @see org.epics.css.dal.SimpleMonitor#setTimerTrigger(long)
	 */
	public void setTimerTrigger(long trigger) throws DataExchangeException, UnsupportedOperationException {
		if (this.timerTrigger == trigger) return;
		this.timerTrigger = trigger;
		try {
			initialize();
		} catch (RemoteException e) {
			throw new DataExchangeException(this,"Could not change the heartbeat rate for property '" + source.getPropertyName().getPropertyName() +"' on device '" + source.getDeviceProxy().get_name() +"'.",e);
		}

	}

	/*
	 * (non-Javadoc)
	 * @see org.ecpis.css.dal.tango.TangoRequestImpl#getCallback()
	 */
	@Override
	TangoRequestCallback<T> getCallback() {
		if (callback == null) {
			callback = new TangoRequestCallback<T>(this,source,true,null);
		}
		return callback;
	}
}
