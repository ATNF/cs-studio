package org.csstudio.apputil.ui.swt;

import org.eclipse.swt.events.ControlAdapter;
import org.eclipse.swt.events.ControlEvent;
import org.eclipse.swt.events.DisposeEvent;
import org.eclipse.swt.events.DisposeListener;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;

/** Auto-size table columns to fill enclosing composite.
 * 
 *  All the table columns must be generated by AutoSizeColumn.make().
 *  Then add a AutoSizeControlListener as the ControlListener of the composite
 *  which contains the table.
 *  The table will be resized to fill the composite.
 *  
 *  @author Kay Kasemir
 */
public class AutoSizeControlListener
	extends ControlAdapter implements DisposeListener
{
	private static final int BORDER_STUFF = 30;
	final private Composite container;
	final private Table table;

    /** Constructor.
     *  @param container Typically the Parent of the table
     *  @param table The table to resize automatically
     */
	@SuppressWarnings("nls")
    public AutoSizeControlListener(final Composite container, final Table table)
	{
		this.container = container;
		this.table = table;
		for (int i = 0; i < table.getColumnCount(); ++i)
		{
			final TableColumn column = table.getColumn(i);
            final Object data = column.getData();
			if (data == null)
			    throw new Error("Column " + column.getText() + "(" + i
			            + ") has null data");
            if (!(data instanceof AutoSizeColumn))
				throw new Error("Column " + column.getText() + "(" + i
				        + ") has invalid data type " + data.getClass().getName());
		}
		// Listen to container resize ...
		container.addControlListener(this);
		// .. until the table gets removed.
		table.addDisposeListener(this);
	}

	/** Resize the table columns. */
	@Override
	public void controlResized(final ControlEvent e)
	{
		int i, total_weight = 0, total_min = 0;
		// Compute sum of all weights and minimum sizes.
		for (i = 0; i < table.getColumnCount(); ++i)
		{
			final TableColumn col = table.getColumn(i);
			total_weight += ((AutoSizeColumn) col.getData()).getWeight();
			total_min += ((AutoSizeColumn) col.getData()).getMinSize();
		}
		// Resize columns to fit total
		final Rectangle bounds = container.getClientArea();
		// Adjust width to allow for borders, avoid scroll bars
		bounds.width -= BORDER_STUFF;
		if (bounds.width < 50)
			bounds.width = 50;
		int extra = bounds.width - total_min;
		if (extra < 0)
			extra = 0;
		// Assign minimum size to all columns,
		// distributing extra spaced based on column weights.
		for (i = 0; i < table.getColumnCount(); ++i)
		{
		    final TableColumn col = table.getColumn(i);
			int size = ((AutoSizeColumn) col.getData()).getMinSize();
			if (extra > 0)
			{
				int weight = ((AutoSizeColumn) col.getData()).getWeight();
				size += (extra * weight) / total_weight;
			}
			col.setWidth(size);
		}
	}

	/** DisposeListener */
	public void widgetDisposed(final DisposeEvent e)
	{
		if (container.isDisposed())
			return;
		container.removeControlListener(this);
	}
}
