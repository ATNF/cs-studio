<project name="css.hudson.build" default="build">
	<property file="desy.build.properties" />
	<property file="desy.eclipse.properties" />

	<target name="build" depends="syncPlugins, buildWindows, buildSolaris"/>

	<target name="buildWindows" depends="cleanup, pdeBuildWin, updateConfigWin, jenkinsUpdateWin"/>
	<target name="buildSolaris" depends="cleanup, pdeBuildSolaris, updateConfigSolaris, jenkinsUpdateSolaris"/>

	<!--
		Debug output
	-->
    <tstamp>
        <format timezone="GMT" property="timestamp" pattern="yyyy-MM-dd hh:mm:ss"/>
    </tstamp>
	<echo message="Workspace location: ${workspaceLocation}"/>
	<echo message="Eclipse instance: ${eclipseInstance}"/>
	<echo message="Eclipse target platform: ${targetPlatformLocation}"/>
	<echo message="Eclipse target platform additionals: ${targetPlatformLocation_2}"/>
	<echo message="Build directory: ${desyBuildDirectory}"/>
	<echo message="Jenkins base: ${jenkinsbase}"/>
	<echo message="Base dir: ${basedir}"/>
	<echo message="Timestamp: ${timestamp}"/>
	<echo message="Job name: ${jenkinsjob}"/>
	<echo message="CS Studio location:  ${csStudioLocation}"/>
	<echo message="DESY config location:  ${desyConfigLocation}"/>
    <echo message="Launcher: ${equinoxLauncher}" />
	
	
	<!--
	 Synchronizes the plugin contents retrieved by the upstream jenkins jobs with the current build 
	 directory (avoiding unnecessary copying and deleting as much as possible).
	-->
	<target name="syncPlugins">
        <delete dir="${pdeBuildDirectory}"/>
		<mkdir dir="${pdeBuildDirectory}"/>
		<!--  
         overwrites all files in ${workspaceLocation}/build with newer files from filesets, 
         deletes files from ${workspaceLocation}/build that are not present in filesets. 
        -->
        <sync todir="${desyBuildDirectory}">
          <fileset dir="${csStudioLocation}/core"/>
          <fileset dir="${csStudioLocation}/applications">
            <exclude name="plugins/${projectDir}/build/build.xml"/>
          </fileset>          
          <fileset dir="${targetPlatformLocation}"/>
          <fileset dir="${targetPlatformLocation_2}"/>
        </sync>
        
        <!-- 
         copy the pde build files into the build directory 
        -->
        <copy todir="${desyBuildDirectory}">
          <fileset dir="${csStudioLocation}/applications/plugins/${projectDir}/build" casesensitive="yes">
            <include name="build.properties"/>
            <include name="productBuild.xml"/>
          </fileset>          
          <fileset dir="${desyConfigLocation}/DESY/css/sensitivedata/${projectDir}" casesensitive="yes">
            <include name="plugin_customization.ini"/>
          </fileset>
        </copy>
	</target>
	
	
	<!--
    	Headless Eclipse Build.
	-->
	<target name="cleanup">
		<!-- delete file="${workspaceLocation}/build/*.xml"/ -->	
		<!-- delete file="${workspaceLocation}/build/*.properties"/ -->	
		<delete file="${workspaceLocation}/build/*.sh"/>	
		<delete file="${workspaceLocation}/build/secure_storage"/>	
		<delete dir="${workspaceLocation}/build/I.CSSHead_"/>	
		<delete dir="${workspaceLocation}/build/initmp"/>	
	</target>

	<!--
	    Headless Eclipse Build for Windows
	-->
    <target name="pdeBuildWin">
        <java classname="org.eclipse.equinox.launcher.Main" 
              dir="${desyBuildDirectory}"
              fork="true" 
              failonerror="true">           
            <arg value="-application" />
            <arg value="org.eclipse.ant.core.antRunner" />
            <arg value="-buildfile" />
            <arg value="productBuild.xml" />
            <arg value="-DbaseLocation=." />
            <arg value="-Dconfigs=win32, win32, x86" />
            <classpath>
                <pathelement location="${equinoxLauncher}" />
            </classpath>
        </java>
    </target>	

	<!--
	    Headless Eclipse Build for Solaris
	-->
	<target name="pdeBuildSolaris">
		<java classname="org.eclipse.equinox.launcher.Main" fork="true" failonerror="true">			
			<arg value="-application" />
			<arg value="org.eclipse.ant.core.antRunner" />
			<arg value="-buildfile" />
			<arg value="${basedir}/productBuild.xml" />
			<arg value="-DbaseLocation=${targetPlatformLocation}" />
			<arg value="-Dconfigs=solaris, gtk, sparc" />
			<classpath>
				<pathelement location="${equinoxLauncher}" />
			</classpath>
		</java>
	</target>

	<!--
		Copy plugincustomization and to win product
	-->
	<target name="updateConfigWin">
		<mkdir dir="${workspaceLocation}/build/initmp/${archivePrefix}" />
		<copy todir="${workspaceLocation}/build/initmp/${archivePrefix}">
			<fileset file="${workspaceLocation}/build/plugin_customization.ini"/>
		</copy>
		<zip destfile="${workspaceLocation}/build/${buildId}-win32.win32.x86.zip" 
			 basedir="${workspaceLocation}/build/initmp" update="true" />
	</target>

	<!--
		Copy plugincustomization and to solaris product
	-->
	<target name="updateConfigSolaris">
		<mkdir dir="${workspaceLocation}/build/initmp/${archivePrefix}" />
		<copy todir="${workspaceLocation}/build/initmp/${archivePrefix}">
			<fileset file="${workspaceLocation}/plugin_customization.ini"/>
		</copy>
		<zip destfile="${workspaceLocation}/build/${buildId}-solaris.gtk.sparc.zip" 
			 basedir="${workspaceLocation}/build/initmp" update="true" />
	</target>

	<!--
		Copy win product to artifact folder from hudson
	-->
	<target name="jenkinsUpdateWin">
		<copy file="${workspaceLocation}/build/${buildId}-win32.win32.x86.zip" 
			  todir="${jenkinsbase}/jobs/${jenkinsjob}/workspace/artifacts"/>
	</target>

	<!--
		Copy solaris product to artifact folder from hudson
	-->
	<target name="jenkinsUpdateSolaris">
		<copy file="${workspaceLocation}/build/${buildId}-solaris.gtk.sparc.zip" 
			  todir="${jenkinsbase}/jobs/${jenkinsjob}/workspace/artifacts"/>
	</target>
</project>