package de.desy.css.dal.tine;

import static junit.framework.Assert.assertTrue;

import org.epics.css.dal.DoubleProperty;
import org.epics.css.dal.DynamicValueAdapter;
import org.epics.css.dal.DynamicValueEvent;
import org.epics.css.dal.DynamicValueProperty;
import org.epics.css.dal.context.RemoteInfo;
import org.epics.css.dal.impl.DefaultApplicationContext;
import org.epics.css.dal.spi.DefaultPropertyFactoryService;
import org.epics.css.dal.spi.LinkPolicy;
import org.epics.css.dal.spi.PropertyFactory;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class TINEPlugTest {

	private DefaultApplicationContext _applicationContext;

	private PropertyFactory _propertyFactory;

	private static final String PROPERTY_NAME = "TINE/DEFAULT/TIMESRV/device_0/SYSTIME";

	private long _eventCount;

	/**
	 * Set up the test case.
	 */
	@Before
	public void setUp() throws Exception {
		_applicationContext = new TINEApplicationContext("TINEPlugTest"); //$NON-NLS-1$

		_propertyFactory = DefaultPropertyFactoryService
				.getPropertyFactoryService().getPropertyFactory(
						_applicationContext, LinkPolicy.ASYNC_LINK_POLICY);

		_eventCount = 0;
	}

	/**
	 * Tear down the testcase.
	 */
	@After
	public void tearDown() throws Exception {
	}

	@Test
	public void basicDynamicValueListenerTest() throws Exception {
		DynamicValueProperty property = _propertyFactory.getProperty(
				new RemoteInfo(PROPERTY_NAME), DoubleProperty.class, null);

		long initialEventCount = _eventCount;

		property.addDynamicValueListener(new DynamicValueAdapter() {
			@Override
			public void valueUpdated(DynamicValueEvent arg0) {
				_eventCount++;
			}

			@Override
			public void valueChanged(DynamicValueEvent arg0) {
				_eventCount++;
			}
		});

		Thread.sleep(3000);
		assertTrue(_eventCount > initialEventCount);

		_propertyFactory.getPropertyFamily().destroy(property);
	}

	@Test
	public void extendedDynamicValueListenerTest() throws Exception {
		DynamicValueProperty property = _propertyFactory.getProperty(
				new RemoteInfo(PROPERTY_NAME), DoubleProperty.class, null);

		long initialEventCount = _eventCount;

		property.addDynamicValueListener(new DynamicValueAdapter() {
			@Override
			public void valueUpdated(DynamicValueEvent arg0) {
				_eventCount++;
			}

			@Override
			public void valueChanged(DynamicValueEvent arg0) {
				_eventCount++;
			}
		});

		Thread.sleep(3000);
		assertTrue(_eventCount > initialEventCount);

		long changedEventCount = _eventCount;

		// now we request a value
		Object value = property.getValue();

		Thread.sleep(3000);

		// there is one event that is generated by getValue
		assertTrue(_eventCount > changedEventCount + 1);
	}

}
